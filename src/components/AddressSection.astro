---
// src/components/AddressSection.astro
import AddressCard from "./AddressCard.astro";
import AddressForm from "./AddressForm.astro";
---

<div id="address-section">
  <div class="flex justify-between items-center mb-4">
    <h2 class="text-2xl font-bold">Buku Alamat</h2>
    <button id="add-address-btn" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
      Tambah Alamat Baru
    </button>
  </div>
  <div id="address-list-container">
    <p id="loading-indicator">Memuat alamat, mohon tunggu...</p>
  </div>
</div>

<AddressForm />

<script>
  const addressCardTemplate = document.createElement('template');
  addressCardTemplate.innerHTML = `
    <div class="address-card border rounded-lg p-4 mb-4 flex justify-between items-start">
      <div>
        <div class="flex items-center mb-2">
          <h3 class="font-bold text-lg mr-2" data-part="label"></h3>
          <span data-part="primary-badge" class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full hidden">
            Utama
          </span>
        </div>
        <p class="font-semibold" data-part="recipient_name"></p>
        <p data-part="recipient_phone"></p>
        <p data-part="full_address"></p>
        <p class="text-sm text-gray-600" data-part="destination_text"></p>
        <p class="text-sm text-gray-600" data-part="postal_code"></p>
      </div>
      <div class="flex flex-col space-y-2">
        <button data-action="edit" class="text-sm text-blue-600 hover:underline">Ubah</button>
        <button data-action="delete" class="text-sm text-red-600 hover:underline">Hapus</button>
      </div>
    </div>
  `;

  const addAddressBtn = document.getElementById('add-address-btn');
  addAddressBtn.addEventListener('click', () => {
    document.dispatchEvent(new CustomEvent('showAddressForm', {
      detail: {
        mode: 'add',
        address: null
      }
    }));
  });

  const addressListContainer = document.getElementById('address-list-container');
  const loadingIndicator = document.getElementById('loading-indicator');

  async function loadAddresses() {
    try {
      loadingIndicator.style.display = 'block';
      addressListContainer.innerHTML = '';
      addressListContainer.appendChild(loadingIndicator);
      
      const response = await fetch('/api/addresses');
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Gagal memuat alamat. Status: ${response.status}. Pesan: ${errorText}`);
      }
      
      const addresses = await response.json();
      loadingIndicator.style.display = 'none';
      addressListContainer.innerHTML = '';
      
      if (addresses.length === 0) {
        addressListContainer.innerHTML = '<p>Anda belum memiliki alamat tersimpan.</p>';
        return;
      }
      
      addresses.forEach(address => {
        const cardClone = addressCardTemplate.content.cloneNode(true);
        const cardElement = cardClone.querySelector('.address-card');
        cardElement.dataset.address = JSON.stringify(address);
        
        cardElement.querySelector('[data-part="label"]').textContent = address.label || 'Alamat';
        cardElement.querySelector('[data-part="recipient_name"]').textContent = address.recipient_name;
        cardElement.querySelector('[data-part="recipient_phone"]').textContent = address.recipient_phone;
        cardElement.querySelector('[data-part="full_address"]').textContent = address.full_address;
        cardElement.querySelector('[data-part="destination_text"]').textContent = address.destination_text || '';
        cardElement.querySelector('[data-part="postal_code"]').textContent = address.postal_code ? `Kode Pos: ${address.postal_code}` : '';
        
        if (address.is_primary) {
          cardElement.querySelector('[data-part="primary-badge"]').classList.remove('hidden');
        }
        
        addressListContainer.appendChild(cardClone);
      });
    } catch (error) {
      console.error('[BJS ERROR] Terjadi kesalahan saat memuat alamat:', error);
      loadingIndicator.style.display = 'none';
      addressListContainer.innerHTML = `
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
          <strong class="font-bold">Oops!</strong>
          <span class="block sm:inline">Terjadi kesalahan saat memuat data alamat. Silakan coba muat ulang halaman.</span>
          <p class="text-xs mt-2">Detail Error: ${error.message}</p>
        </div>
      `;
    }
  }

  addressListContainer.addEventListener('click', async (e) => {
    const target = e.target;
    const action = target.dataset.action;
    if (!action) return;
    
    const card = target.closest('.address-card');
    const address = JSON.parse(card.dataset.address);
    
    if (action === 'delete') {
      if (confirm(`Apakah Anda yakin ingin menghapus alamat "${address.label || address.recipient_name}"?`)) {
        try {
          const response = await fetch('/api/addresses', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ addressId: address.id }),
          });
          if (!response.ok) throw new Error('Gagal menghapus alamat dari server.');
          card.remove();
        } catch (error) {
          alert(error.message);
        }
      }
    }
    
    if (action === 'edit') {
      document.dispatchEvent(new CustomEvent('showAddressForm', {
        detail: {
          mode: 'edit',
          address: address
        }
      }));
    }
  });

  document.addEventListener('DOMContentLoaded', loadAddresses);
  document.addEventListener('addressSaved', loadAddresses);
</script>