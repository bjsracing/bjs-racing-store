---
// src/components/AddressSection.astro
// Komponen ini sekarang akan mendengarkan Nano Store secara reaktif.
import AddressForm from "./AddressForm.astro";
// AddressCard di-render secara dinamis oleh script, tidak perlu diimpor di frontmatter.
---

<div id="address-section">
  <div class="flex justify-between items-center mb-4">
    <h2 class="text-2xl font-bold">Buku Alamat</h2>
    <button id="add-address-btn" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
      Tambah Alamat Baru
    </button>
  </div>
  <div id="address-list-container">
    <p id="loading-indicator">Memuat alamat, mohon tunggu...</p>
  </div>
</div>

<AddressForm />

<script>
  // ==================================================================
  // == REFACTOR NANO STORES: Langkah 3                            ==
  // == Impor store dan aksi-aksinya.                              ==
  // ==================================================================
  import { addressListStore, fetchAddresses, deleteAddress, type Address } from '@/stores/addressStore';

  // --- Elemen DOM ---
  const addAddressBtn = document.getElementById('add-address-btn') as HTMLButtonElement;
  const addressListContainer = document.getElementById('address-list-container') as HTMLDivElement;
  const loadingIndicator = document.getElementById('loading-indicator') as HTMLParagraphElement;

  // Template HTML untuk kartu alamat (sama seperti sebelumnya)
  const addressCardTemplate = document.createElement('template');
  addressCardTemplate.innerHTML = `
    <div class="address-card bg-white shadow-md rounded-xl p-5 mb-4 flex flex-col gap-4">
      <div class="flex justify-between items-center">
        <div class="flex items-center gap-3">
          <h3 class="font-bold text-lg text-slate-800" data-part="label"></h3>
          <span data-part="primary-badge" class="bg-orange-100 text-orange-600 text-xs font-bold px-3 py-1 rounded-full hidden">Utama</span>
        </div>
        <div class="relative">
          <details class="group">
            <summary class="list-none cursor-pointer text-slate-500 hover:text-slate-800">...</summary>
            <div class="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg border z-10 hidden group-open:block">
              <a href="#" data-action="edit" class="block px-4 py-2 text-sm text-slate-700 hover:bg-gray-100">Ubah Alamat</a>
              <a href="#" data-action="delete" class="block px-4 py-2 text-sm text-red-600 hover:bg-red-50">Hapus</a>
            </div>
          </details>
        </div>
      </div>
      <hr />
      <div class="space-y-3 text-slate-600">
        <div class="flex items-center gap-3"><p class="font-semibold" data-part="recipient_name"></p></div>
        <div class="flex items-center gap-3"><p data-part="recipient_phone"></p></div>
        <div class="flex items-start gap-3"><div><p data-part="full_address"></p><p class="text-sm text-slate-500" data-part="destination_text"></p><p class="text-sm text-slate-500" data-part="postal_code"></p></div></div>
      </div>
    </div>`;

  /**
   * Fungsi untuk merender ulang daftar alamat berdasarkan data dari store.
   * @param {Address[]} addresses - Daftar alamat terbaru dari Nano Store.
   */
  function renderAddressList(addresses: Address[]) {
    addressListContainer.innerHTML = ''; // Bersihkan daftar sebelum render ulang

    if (addresses.length === 0) {
      addressListContainer.innerHTML = '<p>Anda belum memiliki alamat tersimpan.</p>';
      return;
    }

    addresses.forEach(address => {
      const cardClone = addressCardTemplate.content.cloneNode(true) as DocumentFragment;
      const cardElement = cardClone.querySelector('.address-card') as HTMLDivElement;
      cardElement.dataset.address = JSON.stringify(address);

      // Mengisi data ke template
      (cardElement.querySelector('[data-part="label"]') as HTMLElement).textContent = address.label || 'Alamat';
      (cardElement.querySelector('[data-part="recipient_name"]') as HTMLElement).textContent = address.recipient_name || '';
      (cardElement.querySelector('[data-part="recipient_phone"]') as HTMLElement).textContent = address.recipient_phone || '';
      (cardElement.querySelector('[data-part="full_address"]') as HTMLElement).textContent = address.full_address || '';
      (cardElement.querySelector('[data-part="destination_text"]') as HTMLElement).textContent = address.destination_text || '';
      (cardElement.querySelector('[data-part="postal_code"]') as HTMLElement).textContent = address.postal_code ? `Kode Pos: ${address.postal_code}` : '';
      if (address.is_primary) {
        (cardElement.querySelector('[data-part="primary-badge"]') as HTMLElement).classList.remove('hidden');
      }
      
      addressListContainer.appendChild(cardClone);
    });
  }

  // --- Event Listener ---

  addAddressBtn.addEventListener('click', () => {
    document.dispatchEvent(new CustomEvent('showAddressForm', { 
      detail: { mode: 'add', address: null } 
    }));
  });
  
  addressListContainer.addEventListener('click', async (e) => {
    const target = (e.target as HTMLElement).closest('[data-action]');
    if (!target) return;
    
    const action = target.getAttribute('data-action');
    const card = (e.target as HTMLElement).closest('.address-card') as HTMLDivElement;
    const address = JSON.parse(card.dataset.address);
    
    if (action === 'delete') {
      if (confirm(`Apakah Anda yakin ingin menghapus alamat "${address.label || address.recipient_name}"?`)) {
        try {
          // ==================================================================
          // == REFACTOR NANO STORES: Langkah 4                            ==
          // == Ganti fetch manual dengan memanggil aksi 'deleteAddress'.    ==
          // == Store akan refresh secara otomatis setelah delete berhasil.  ==
          // ==================================================================
          await deleteAddress(address.id);
        } catch (error) {
          alert((error as Error).message);
        }
      }
    }
    
    if (action === 'edit') {
      document.dispatchEvent(new CustomEvent('showAddressForm', {
        detail: { mode: 'edit', address: address }
      }));
    }
  });

  // ==================================================================
  // == REFACTOR NANO STORES: Langkah 5                            ==
  // == Berlangganan perubahan store dan panggil fetch awal.       ==
  // ==================================================================

  // 1. Dengarkan perubahan di store. Setiap kali data di store berubah, panggil renderAddressList.
  addressListStore.subscribe(renderAddressList);

  // 2. Panggil fetchAddresses() saat komponen pertama kali dimuat untuk mengisi store.
  fetchAddresses();
</script>