---
// src/components/AddressSection.astro
import AddressCard from "./AddressCard.astro";
import AddressForm from "./AddressForm.astro";
---

<div id="address-section">
  <div class="flex justify-between items-center mb-4">
    <h2 class="text-2xl font-bold">Buku Alamat</h2>
    <button id="add-address-btn" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
      Tambah Alamat Baru
    </button>
  </div>
  <div id="address-list-container">
    <p id="loading-indicator">Memuat alamat, mohon tunggu...</p>
  </div>
</div>

<AddressForm />

<script>
  // Template untuk kartu alamat
  const addressCardTemplate = document.createElement('template');
  addressCardTemplate.innerHTML = `
    <div class="address-card bg-white shadow-md rounded-xl p-5 mb-4 flex flex-col gap-4">
      <div class="flex justify-between items-center">
        <div class="flex items-center gap-3">
          <h3 class="font-bold text-lg text-slate-800" data-part="label"></h3>
          <span data-part="primary-badge" class="bg-orange-100 text-orange-600 text-xs font-bold px-3 py-1 rounded-full hidden">Utama</span>
        </div>
        <div class="relative">
          <details class="group">
            <summary class="list-none cursor-pointer text-slate-500 hover:text-slate-800">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="1"></circle><circle cx="12" cy="5" r="1"></circle><circle cx="12" cy="19" r="1"></circle></svg>
            </summary>
            <div class="absolute right-0 mt-2 w-32 bg-white rounded-md shadow-lg border z-10 hidden group-open:block">
              <a href="#" data-action="edit" class="block px-4 py-2 text-sm text-slate-700 hover:bg-gray-100">Ubah Alamat</a>
              <a href="#" data-action="delete" class="block px-4 py-2 text-sm text-red-600 hover:bg-red-50">Hapus</a>
            </div>
          </details>
        </div>
      </div>
      <hr />
      <div class="space-y-3 text-slate-600">
        <div class="flex items-center gap-3">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-user flex-shrink-0"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>
          <p class="font-semibold" data-part="recipient_name"></p>
        </div>
        <div class="flex items-center gap-3">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-phone flex-shrink-0"><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path></svg>
          <p data-part="recipient_phone"></p>
        </div>
        <div class="flex items-start gap-3">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-map-pin flex-shrink-0 mt-1"><path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path><circle cx="12" cy="10" r="3"></circle></svg>
          <div>
            <p data-part="full_address"></p>
            <p class="text-sm text-slate-500" data-part="destination_text"></p>
            <p class="text-sm text-slate-500" data-part="postal_code"></p>
          </div>
        </div>
      </div>
    </div>
  `;

  const addAddressBtn = document.getElementById('add-address-btn');
  addAddressBtn.addEventListener('click', () => {
    document.dispatchEvent(new CustomEvent('showAddressForm', { 
      detail: { mode: 'add', address: null } 
    }));
  });
  
  const addressListContainer = document.getElementById('address-list-container');
  const loadingIndicator = document.getElementById('loading-indicator');

  async function loadAddresses() {
    try {
      loadingIndicator.style.display = 'block';
      addressListContainer.innerHTML = '';
      addressListContainer.appendChild(loadingIndicator);

      const response = await fetch('/api/addresses');
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Gagal memuat alamat. Status: ${response.status}. Pesan: ${errorText}`);
      }
      
      const addresses = await response.json();
      
      loadingIndicator.style.display = 'none';
      addressListContainer.innerHTML = '';

      if (addresses.length === 0) {
        addressListContainer.innerHTML = '<p>Anda belum memiliki alamat tersimpan.</p>';
        return;
      }

      addresses.forEach(address => {
        const cardClone = addressCardTemplate.content.cloneNode(true);
        const cardElement = cardClone.querySelector('.address-card');
        cardElement.dataset.address = JSON.stringify(address);

        // âœ… PERBAIKAN: Pemeriksaan nilai NULL sebelum ditampilkan
        cardElement.querySelector('[data-part="label"]').textContent = address.label || 'Alamat';
        cardElement.querySelector('[data-part="recipient_name"]').textContent = address.recipient_name || '';
        cardElement.querySelector('[data-part="recipient_phone"]').textContent = address.recipient_phone || '';
        cardElement.querySelector('[data-part="full_address"]').textContent = address.full_address || '';
        cardElement.querySelector('[data-part="destination_text"]').textContent = address.destination_text || '';
        cardElement.querySelector('[data-part="postal_code"]').textContent = address.postal_code ? `Kode Pos: ${address.postal_code}` : '';

        if (address.is_primary) { 
          cardElement.querySelector('[data-part="primary-badge"]').classList.remove('hidden');
        }
        
        addressListContainer.appendChild(cardClone);
      });

    } catch (error) {
      console.error('[BJS ERROR] Terjadi kesalahan saat memuat alamat:', error);
      loadingIndicator.style.display = 'none';
      addressListContainer.innerHTML = `
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
          <strong class="font-bold">Oops!</strong>
          <span class="block sm:inline">Terjadi kesalahan saat memuat data alamat. Silakan coba muat ulang halaman.</span>
          <p class="text-xs mt-2">Detail Error: ${error.message}</p>
        </div>
      `;
    }
  }
  
  addressListContainer.addEventListener('click', async (e) => {
    const target = e.target.closest('[data-action]');
    if (!target) return;
    
    const action = target.dataset.action;
    const card = target.closest('.address-card');
    const address = JSON.parse(card.dataset.address);
    
    if (action === 'delete') {
      if (confirm(`Apakah Anda yakin ingin menghapus alamat "${address.label || address.recipient_name}"?`)) {
        try {
          const response = await fetch('/api/addresses', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ addressId: address.id }),
          });
          if (!response.ok) throw new Error('Gagal menghapus alamat dari server.');
          card.remove();
        } catch (error) {
          alert(error.message);
        }
      }
    }
    
    if (action === 'edit') {
      document.dispatchEvent(new CustomEvent('showAddressForm', {
        detail: {
          mode: 'edit',
          address: address
        }
      }));
    }
  });

  document.addEventListener('DOMContentLoaded', loadAddresses);
  document.addEventListener('addressSaved', loadAddresses);
</script>